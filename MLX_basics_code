#include <Wire.h>
#include <WiFi.h>

#include "MLX90640_API.h"
#include "MLX90640_I2C_Driver.h"

int LED_mlx_on= 5, LED_mlx=19;

const byte MLX90640_address = 0x33; //Default 7-bit unshifted address of the MLX90640

#define TA_SHIFT 8 //Default shift for MLX90640 in open air

static float mlx90640To[768];
paramsMLX90640 mlx90640;

const char* ssid = "**"; // WiFi SSID
const char* password = "**"; // WiFi Password
WiFiServer server(80); // TCP Server port

void setup()
{
  pinMode(LED_mlx_on, OUTPUT);
  pinMode(LED_mlx, OUTPUT);
  Wire.begin();
  Wire.setClock(400000); //Increase I2C clock speed to 400kHz

  Serial.begin(9600);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi!");
  
  // TCP server stert
  server.begin();
  Serial.println("TCP server started.");
  Serial.print("Local IP : ");
  Serial.println(WiFi.localIP()); // esp32의 할당 받은 ip 주소 Assigned ip address of esp32
  
  while (!Serial); //Wait for user to open terminal
  Serial.println("MLX90640 IR Array Example");

  if (isConnected() == false)
  {
    Serial.println("MLX90640 not detected at default I2C address. Please check wiring. Freezing.");
    while (1);
  }
  Serial.println("MLX90640 online!");
  digitalWrite(LED_mlx_on, HIGH);
  //Get device parameters - We only have to do this once
  int status;
  uint16_t eeMLX90640[832];
  status = MLX90640_DumpEE(MLX90640_address, eeMLX90640);
  if (status != 0)
    Serial.println("Failed to load system parameters");

  status = MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
  if (status != 0)
    Serial.println("Parameter extraction failed");

  //Once params are extracted, we can release eeMLX90640 array
}

void loop()
{
  WiFiClient client = server.available();
  if (client) {
    Serial.println("New client connected.");
  while (client.connected())  {

    
  for (byte x = 0 ; x < 2 ; x++) //Read both subpages
  {
    uint16_t mlx90640Frame[834];
    int status = MLX90640_GetFrameData(MLX90640_address, mlx90640Frame);
    if (status < 0)
    {
      Serial.print("GetFrame Error: ");
      Serial.println(status);
    }

    float vdd = MLX90640_GetVdd(mlx90640Frame, &mlx90640);
    float Ta = MLX90640_GetTa(mlx90640Frame, &mlx90640);

    float tr = Ta - TA_SHIFT; //Reflected temperature based on the sensor ambient temperature
    float emissivity = 0.95;

    MLX90640_CalculateTo(mlx90640Frame, &mlx90640, emissivity, tr, mlx90640To);
  }
  digitalWrite(LED_mlx, HIGH);
  for (int x = 0 ; x < 24 ; x++)
  {
      for(int y = 0 ; y < 32 ; y++)
      {
      float t = mlx90640To[x * 32 + y] ;  
      char c = '&' ;
      if( t < 20) c = ' ';
      else if (t < 23) c = '.';
      else if (t < 25) c = '-';
      else if (t < 27) c = '*';
      else if (t < 29) c = '+';
      else if (t < 31) c = 'x';
      else if (t < 33) c = '%';
      else if (t < 35) c = '#';
      else if (t < 37) c = 'X';
      else if (t < 40) c = '4';
      else if (t < 50) c = '5';
      else if (t < 60) c = '6';
      else if (t < 70) c = '7';
      else if (t < 80) c = '8';
      else if (t < 90) c = '9';
      else if (t < 100) c = 'T';
      else if (t > 100) c = '0';
      Serial.print(c);
      
    }
    Serial.println();
  }
    Serial.println();
    digitalWrite(LED_mlx, LOW);
}
  client.stop();
  Serial.println("Client disconnected.");
  digitalWrite(LED_mlx_on, LOW);
}
}

//Returns true if the MLX90640 is detected on the I2C bus
boolean isConnected()
{
  Wire.beginTransmission((uint8_t)MLX90640_address);
  if (Wire.endTransmission() != 0)
    return (false); //Sensor did not ACK
  return (true);
}
