#include <WiFi.h>
#include <Wire.h>
#include "ESP32Servo.h"

#include "MLX90640_API.h"
#include "MLX90640_I2C_Driver.h"

int LED_mlx_on= 5, LED_mlx=19;

const byte MLX90640_address = 0x33;

#define TA_SHIFT 8 

static float mlx90640To[768];
paramsMLX90640 mlx90640;

const char* ssid = "CodingClub";      // 와이파이 이름
const char* password = "63711076";  // 암호
WiFiServer server(80);

int LED1 = 13, LED2 = 12, LED3 = 14,LED4 = 19, date=1000, MLX_SHOW=true;

Servo esc1, esc2, esc3, esc4;



class MLX90640 {
  public:
    int LED4;
  MLX90640(int pin4){
    LED4 = pin4;
    
  }
void Update() {
  int var = 0;
  for (byte x = 0 ; x < 2 ; x++)
  {
    uint16_t mlx90640Frame[834];
    int status = MLX90640_GetFrameData(MLX90640_address, mlx90640Frame);
    if (status < 0)
    {
      Serial.print("GetFrame Error: ");
      Serial.println(status);
    }

    float vdd = MLX90640_GetVdd(mlx90640Frame, &mlx90640);
    float Ta = MLX90640_GetTa(mlx90640Frame, &mlx90640);

    float tr = Ta - TA_SHIFT;
    float emissivity = 0.95;

    MLX90640_CalculateTo(mlx90640Frame, &mlx90640, emissivity, tr, mlx90640To);
  }
  digitalWrite(LED4, HIGH);

  

  
  for (int x = 0 ; x < 24 ; x++)
  {
      for(int y = 0 ; y < 32 ; y++)
      {
      float t = mlx90640To[x * 32 + y] ;   
      char c = '&' ;
      if( t < 20) c = ' ';
      else if (t < 23) c = '.';
      else if (t < 25) c = '-';
      else if (t < 27) c = '*';
      else if (t < 29) c = '+';
      else if (t < 31) c = 'x';
      else if (t < 33) c = '%';
      else if (t < 35) c = '#';
      else if (t < 37) c = 'X';
      else if (t < 40) c = '4';
      else if (t < 50) c = '5';
      else if (t < 60) c = '6';
      else if (t < 70) c = '7';
      else if (t < 80) c = '8';
      else if (t < 90) c = '9';
      else if (t >= 100) c = '0';
      if (MLX_SHOW == true){
        Serial.print(c);
      }
       if (MLX_SHOW == false) {
        if ( t >= 100) {
          digitalWrite(LED3, HIGH);
      }
        else if ( 29 <= t <= 37) {
          digitalWrite(LED2, HIGH);
          
        }
        else {
          digitalWrite(LED2, LOW);
          digitalWrite(LED3, LOW);
        }
    }
    }

    Serial.println();

  }
    Serial.println();
    Serial.println("______________________________________");
    Serial.println();
    digitalWrite(LED2, LOW);
    digitalWrite(LED3, LOW);
    digitalWrite(LED4, LOW);
  
}
};

MLX90640 MLX(19);


void setup() {
  esc1.attach(27, 1000, 2000);
  esc2.attach(26, 1000, 2000);
  esc3.attach(25, 1000, 2000);
  esc4.attach(33, 1000, 2000);
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);
  pinMode(LED4, OUTPUT);
  Wire.begin();
  Wire.setClock(350000); //Increase I2C clock speed to 400kHz

  Serial.begin(9600);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi!");
  digitalWrite(LED1, HIGH);
  // TCP 서버 시작
  server.begin();
  Serial.println("TCP server started.");
  Serial.print("Local IP : ");
  Serial.println(WiFi.localIP()); // esp32의 할당 받은 ip 주소 Assigned ip address of esp32
  
  while (!Serial); //Wait for user to open terminal
  Serial.println("MLX90640 IR Array Example");

  if (isConnected() == false)
  {
    Serial.println("MLX90640 not detected at default I2C address. Please check wiring. Freezing.");
    while (1);
  }
  Serial.println("MLX90640 online!");
  digitalWrite(LED2, HIGH);
  //Get device parameters - We only have to do this once
  int status;
  uint16_t eeMLX90640[832];
  status = MLX90640_DumpEE(MLX90640_address, eeMLX90640);
  if (status != 0)
    Serial.println("Failed to load system parameters");

  status = MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
  if (status != 0)
    Serial.println("Parameter extraction failed");
}
boolean isConnected()
{
  Wire.beginTransmission((uint8_t)MLX90640_address);
  if (Wire.endTransmission() != 0)
    return (false); //Sensor did not ACK
  return (true);
}

void loop() {
  WiFiClient client = server.available();
  if (client) {
    Serial.println("New client connected.");
    while (client.connected()) {
    String data = client.readStringUntil('\n');
    int value = data.substring(data.lastIndexOf(' ') + 1).toInt();
    String command = data.substring(0, data.lastIndexOf(' '));
    if (value == 0) {
      MLX.Update();
      esc1.writeMicroseconds(date);
      esc2.writeMicroseconds(date);
      esc3.writeMicroseconds(date);
      esc4.writeMicroseconds(date);
    }
    if (command == "Mlxshow"){
      if (MLX_SHOW == false){
        MLX_SHOW = true;
        Serial.println("MLX_SHOW = true");
      }
      else {
        MLX_SHOW = false;
        Serial.println("MLX_SHOW = false");        
      }
    }
    

    else if (value >= 1000) {
      date = value;
      Serial.println(date);
      esc1.writeMicroseconds(date);
      esc2.writeMicroseconds(date);
      esc3.writeMicroseconds(date);
      esc4.writeMicroseconds(date);
      }
    if (command == "All stop"){
      Serial.println("ALL STOP");
      date == 1000;
      digitalWrite(LED1, LOW);
      digitalWrite(LED2, LOW);
      digitalWrite(LED3, LOW);
      digitalWrite(LED4, LOW);
      esc1.writeMicroseconds(date);
      esc2.writeMicroseconds(date);
      esc3.writeMicroseconds(date);
      esc4.writeMicroseconds(date);
      break;
    }
  }
    }
}
